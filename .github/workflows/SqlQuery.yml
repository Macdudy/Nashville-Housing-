-- Objective: Clean the dataset and Remove all the null values
-- Obtain a dataset that has valid housing market values


-- Exploring the Dataset
Select *
from NashvilleHousing..Sheet1$


--Changing the sale date format

Select SaleDate, CONVERT(date, saledate)
from NashvilleHousing..Sheet1$


-- Update it into main dataframe

Alter Table Sheet1$
Add Saledateconverted date;
UPDATE NashvilleHousing..Sheet1$
SET Saledateconverted = CONVERT(date, saledate)
Alter Table Sheet1$
Drop Column SaleDate
Select *
from NashvilleHousing..Sheet1$


-- Populate property Address Data 
Select PropertyAddress
from NashvilleHousing..Sheet1$
where PropertyAddress is null 

Select a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress,b.PropertyAddress)
from NashvilleHousing..Sheet1$ a
join NashvilleHousing..Sheet1$ b
	on a.ParcelID = b.ParcelID
	and a.[UniqueID ] != b.[UniqueID ]
where a.PropertyAddress is null

Update a
Set PropertyAddress = ISNULL(a.PropertyAddress,b.PropertyAddress)
from NashvilleHousing..Sheet1$ a
join NashvilleHousing..Sheet1$ b
	on a.ParcelID = b.ParcelID
	and a.[UniqueID ] != b.[UniqueID ]
where a.PropertyAddress is null


-- Breaking out address into individual columns( Address, City, State)

Select PropertyAddress
from NashvilleHousing..Sheet1$

Select
SUBSTRING(PropertyAddress, 1, CHARINDEX(',' , PropertyAddress) - 1 ) as UpdatedPropertyAddress,
SUBSTRING(PropertyAddress, CHARINDEX(',' , PropertyAddress) + 1, len(PropertyAddress)) as UpdatedPropertyCity
from NashvilleHousing..Sheet1$

Alter Table Sheet1$
Add UpdatedPropertyAddress nvarchar(255);
UPDATE NashvilleHousing..Sheet1$
SET UpdatedPropertyAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',' , PropertyAddress) - 1 )

Alter Table Sheet1$
Add UpdatedPropertyCity nvarchar(255);
UPDATE NashvilleHousing..Sheet1$
SET UpdatedPropertyCity = SUBSTRING(PropertyAddress, CHARINDEX(',' , PropertyAddress) + 1, len(PropertyAddress))

Alter Table Sheet1$
Drop Column PropertyAddress

Select *
from NashvilleHousing..Sheet1$


-- Breaking Owner Address Using different Technique

Select OwnerAddress
from NashvilleHousing..Sheet1$

Select
PARSENAME(REPLACE(OwnerAddress, ',' , '.'), 3),
PARSENAME(REPLACE(OwnerAddress, ',' , '.'), 2),
PARSENAME(REPLACE(OwnerAddress, ',' , '.'), 1)
from NashvilleHousing..Sheet1$

Alter Table Sheet1$
Add UpdatedOwnerAddress nvarchar(255);

Update NashvilleHousing..Sheet1$
Set UpdatedOwnerAddress = PARSENAME(REPLACE(OwnerAddress, ',' , '.'), 3)

Alter Table Sheet1$
Add UpdatedOwnerCity nvarchar(255);

Update NashvilleHousing..Sheet1$
Set UpdatedOwnerCity = PARSENAME(REPLACE(OwnerAddress, ',' , '.'), 2)

Alter Table Sheet1$
Add UpdatedOwnerState nvarchar(255);

Update NashvilleHousing..Sheet1$
Set UpdatedOwnerState = PARSENAME(REPLACE(OwnerAddress, ',' , '.'), 1)

Alter Table Sheet1$
Drop Column OwnerAddress

Select *
from NashvilleHousing..Sheet1$


-- Change Y and N to Yes or No 

Select SoldAsVacant, COUNT(SoldAsVacant) as TotalCount
from NashvilleHousing..Sheet1$
Group By SoldAsVacant
order by 2

Select SoldAsVacant,
Case 
	When SoldAsVacant = 'Y' then 'Yes'
	When SoldAsVacant = 'N' then 'No'
	else SoldAsVacant
end
from NashvilleHousing..Sheet1$

Update NashvilleHousing..Sheet1$
Set SoldAsVacant = Case 
	When SoldAsVacant = 'Y' then 'Yes'
	When SoldAsVacant = 'N' then 'No'
	else SoldAsVacant
end

Select SoldAsVacant, COUNT(SoldAsVacant) as TotalCount
from NashvilleHousing..Sheet1$
Group By SoldAsVacant
order by 2


-- Remove Duplicates

With RowNumCTE AS(
Select *, 
		ROW_NUMBER() over (
		Partition by ParcelID,
					 UpdatedPropertyAddress,
					 SalePrice,
					 LegalReference
					 Order by UniqueID) row_num

from NashvilleHousing..Sheet1$
)
Delete
from RowNumCTE
where row_num > 1


-- Relace Null values and delete Unwanted Rows without data

Delete from  NashvilleHousing..Sheet1$
where Acreage is null and LandValue is null and BuildingValue is null and TotalValue is null 

Delete from  NashvilleHousing..Sheet1$
where YearBuilt is null

Select * from  NashvilleHousing..Sheet1$
order by [UniqueID ]
